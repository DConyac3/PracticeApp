@model PracticeApp.Models.Budget

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="text-lg-center">
    <h1 class="align-content-lg-center pb-3">Create A Budget</h1>
</div>
    <hr />
    <div class="row justify-content-lg-center">
        <div class="col-lg-4 text-lg-center h4">
            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="GrossSalary" class="control-label"></label>
                    <input asp-for="GrossSalary" id="grossSalary" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="GrossSalary" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="NetSalary" class="control-label"></label>
                    <input asp-for="NetSalary" id="netSalary" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="NetSalary" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="AdditionalIncome" class="control-label"></label>
                    <input asp-for="AdditionalIncome" id="extraIncome" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="AdditionalIncome" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="TotalIncome" class="control-label"></label>
                    <input asp-for="TotalIncome" id="totalIncome" class="form-control-plaintext" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" readonly />
                    <span asp-validation-for="TotalIncome" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="HousingExpense" class="control-label"></label>
                    <input asp-for="HousingExpense" id="housingExpense" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="HousingExpense" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="UtilitiesExpense" class="control-label"></label>
                    <input asp-for="UtilitiesExpense" id="utilitiesExpense" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="UtilitiesExpense" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="FoodExpense" class="control-label"></label>
                    <input asp-for="FoodExpense" id="foodExpense" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="FoodExpense" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="DebtExpense" class="control-label"></label>
                    <input asp-for="DebtExpense" id="debtExpense" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="DebtExpense" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="AdditionalExpense" class="control-label"></label>
                    <input asp-for="AdditionalExpense" id="extraExpense" class="form-control" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="AdditionalExpense" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="TotalExpenses" class="control-label"></label>
                    <input asp-for="TotalExpenses" id="totalExpense" class="form-control-plaintext" readonly="readonly" pattern="^\d{1,3}(,\d{3})*(\.\d+)?$" data-type="currency" value="" />
                    <span asp-validation-for="TotalExpenses" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>

    <div>
        <a asp-controller="Priority" asp-action="PriorityPath">Back to Flowchart</a>
    </div>

    <script>
        // Jquery Dependency

        $("input[data-type='currency']").on({
            keyup: function () {
                formatCurrency($(this));
            },
            blur: function () {
                formatCurrency($(this), "blur");
            }
        });


        function formatNumber(n) {
            // format number 1000000 to 1,234,567
            return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        }


        function formatCurrency(input, blur) {
            // appends $ to value, validates decimal side
            // and puts cursor back in right position.

            // get input value
            var input_val = input.val();

            // don't validate empty input
            if (input_val === "") { return; }

            // original length
            var original_len = input_val.length;

            // initial caret position
            var caret_pos = input.prop("selectionStart");

            // check for decimal
            if (input_val.indexOf(".") >= 0) {

                // get position of first decimal
                // this prevents multiple decimals from
                // being entered
                var decimal_pos = input_val.indexOf(".");

                // split number by decimal point
                var left_side = input_val.substring(0, decimal_pos);
                var right_side = input_val.substring(decimal_pos);

                // add commas to left side of number
                left_side = formatNumber(left_side);

                // validate right side
                right_side = formatNumber(right_side);

                // On blur make sure 2 numbers after decimal
                if (blur === "blur") {
                    right_side += "00";
                }

                // Limit decimal to only 2 digits
                right_side = right_side.substring(0, 2);

                // join number by .
                input_val = left_side + "." + right_side;

            } else {
                // no decimal entered
                // add commas to number
                // remove all non-digits
                input_val = formatNumber(input_val);
                input_val = input_val;

                // final formatting
                if (blur === "blur" || blur === "change") {
                    input_val += ".00";
                }
            }

            // send updated string to input
            input.val(input_val);

            // put caret back in the right position
            var updated_len = input_val.length;
            caret_pos = updated_len - original_len + caret_pos;
            input[0].setSelectionRange(caret_pos, caret_pos);
        }
        $(document).ready(function () {

            // You can't calculate the answer as soon as the page is ready.
            // You need to wait until the user has done something that triggers
            // the calculation. Here, it will happen as the user types into either
            // of the first two inputs
            $("#grossSalary, #netSalary, #extraIncome").on("input", calcIncome);
            $("#housingExpense, #utilitiesExpense, #foodExpense, #debtExpense, #extraExpense").on("input", calcExpense);
            function calcIncome() {
                var sal = $("#netSalary").val().replace(/,/g, '');
                var ext = $("#extraIncome").val().replace(/,/g, '');
                $("#totalIncome").val(parseFloat(sal) + parseFloat(ext));
                formatCurrency($("#totalIncome"), "change");
            }
            function calcExpense() {
                var house = $("#housingExpense").val().replace(/,/g, '');
                var util = $("#utilitiesExpense").val().replace(/,/g, '');
                var food = $("#foodExpense").val().replace(/,/g, '');
                var debt = $("#debtExpense").val().replace(/,/g, '');
                var ext = $("#extraExpense").val().replace(/,/g, '');
                $("#totalExpense").val(parseFloat(house) + parseFloat(util) + parseFloat(food) + parseFloat(debt) + parseFloat(ext));
                formatCurrency($("#totalExpense"), "change");
            }
        });
    </script>

